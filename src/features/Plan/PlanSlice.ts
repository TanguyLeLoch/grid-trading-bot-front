import { createAsyncThunk, createSlice } from '@reduxjs/toolkit'
import { ApiCaller } from '../../utils/ApiCaller'
import { RootState } from '../../app/store'
import { PlanModel } from '../../model/PlanModel'
import { OrderModel, OrderStatus } from '../../model/Order-model'

interface OrderDbState {
    planSelected: string | null
    plans: PlanModel[]
    ordersDb: OrderModel[]
    ordersCex: OrderModel[]
    status: 'idle' | 'loading' | 'failed'
}

const initialState: OrderDbState = {
    planSelected: null,
    plans: [],
    ordersDb: [],
    ordersCex: [],
    status: 'idle'
}

export const fetchPlans = createAsyncThunk('plans/get', async (): Promise<PlanModel[]> => {
    return await ApiCaller.getPlans()
})
export const selectPlanAndFetchOrder = createAsyncThunk(
    'plans/select',
    async (planId: string, thunkAPI): Promise<{ plan: PlanModel, ordersDb: OrderModel[], ordersCex: OrderModel[] }> => {
        const state = thunkAPI.getState() as RootState
        const plan = state.plan.plans.find((p) => p._id === planId)
        if (plan === undefined) {
            throw new Error('Plan with id ' + planId + ' not found')
        }
        const filters = { status: [OrderStatus.NEW, OrderStatus.PARTIALLY_FILLED], planId: plan._id }
        const ordersDb = await ApiCaller.getOrderFromDb(filters)
        const ordersCex = await ApiCaller.getOrderFromCex(plan)
        return { plan, ordersDb, ordersCex }
    }
)

export const planSlice = createSlice({
    name: 'orderDb',
    initialState,
    // The `reducers` field lets us define reducers and generate associated actions
    reducers: {
        // Use the PayloadAction type to declare the contents of `action.payload`
        selectPlan: (state, action) => {
            state.planSelected = action.payload
        }
    },

    // The `extraReducers` field lets the slice handle actions defined elsewhere,
    // including actions generated by createAsyncThunk or in other slices.
    extraReducers: (builder) => {
        builder
            .addCase(fetchPlans.pending, (state) => {
                state.status = 'loading'
            })
            .addCase(fetchPlans.fulfilled, (state, action) => {
                state.plans = action.payload
                state.status = 'idle'
            })
            .addCase(selectPlanAndFetchOrder.pending, (state) => {
                state.status = 'loading'
            })
            .addCase(selectPlanAndFetchOrder.fulfilled, (state, action) => {
                state.planSelected = action.payload.plan._id
                state.ordersDb = action.payload.ordersDb
                state.ordersCex = action.payload.ordersCex
                state.status = 'idle'
            })
    }
})

export const { selectPlan } = planSlice.actions

// The function below is called a selector and allows us to select a value from
// the state. Selectors can also be defined inline where they're used instead of
// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`
export const planSelected = (state: RootState): PlanModel | null => {
    for (const plan of state.plan.plans) {
        if (plan._id === state.plan.planSelected) {
            return plan
        }
    }
    return null
}
export const allPlans = (state: RootState): PlanModel[] => {
    return state.plan.plans
}
export const ordersDbSelected = (state: RootState): OrderModel[] => {
    return state.plan.ordersDb
}
export const ordersCexSelected = (state: RootState): OrderModel[] => {
    return state.plan.ordersCex
}

export default planSlice.reducer
