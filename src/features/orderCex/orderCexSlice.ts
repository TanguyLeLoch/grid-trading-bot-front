import { createAsyncThunk, createSlice } from '@reduxjs/toolkit'
import { OrderModel } from '../../model/Order-model'
import { ApiCaller } from '../../utils/ApiCaller'
import { RootState } from '../../app/store'

interface OrderCexState {
  orders: OrderModel[]
  status: 'idle' | 'loading' | 'failed'
}

const initialState: OrderCexState = {
  orders: [],
  status: 'idle'
}

export const getActiveOrderCex = createAsyncThunk(
  'orderCex/get',
  async (): Promise<OrderModel[]> => {
    return await ApiCaller.getOrderFromCex()
  }
)
export const orderCexSlice = createSlice({
  name: 'orderCex',
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {
    // Use the PayloadAction type to declare the contents of `action.payload`
    updateOrders: (state, action) => {
      state.orders = action.payload
    }
  },

  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      .addCase(getActiveOrderCex.pending, (state) => {
        state.status = 'loading'
      })
      .addCase(getActiveOrderCex.fulfilled, (state, action) => {
        state.status = 'idle'
        state.orders = action.payload
      })
  }
})

export const { updateOrders } = orderCexSlice.actions

// The function below is called a selector and allows us to select a value from
// the state. Selectors can also be defined inline where they're used instead of
// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`
export const selectOrdersCex = (state: RootState): OrderModel[] => {
  return state.orderCex.orders
}

export default orderCexSlice.reducer
